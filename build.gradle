apply from: "dependencies.gradle"
allprojects {
    apply plugin:'java'
    apply plugin:'idea'
    apply plugin:'war'
    apply plugin:'jetty'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'spring-cloud-contract'
    repositories {
        mavenCentral()
        maven { url "http://repo.spring.io/milestone" }
        maven { url "http://repo.spring.io/snapshot" }
        maven { url "https://plugins.gradle.org/m2/" }
    }

}
subprojects {
    apply plugin:'java'
    apply plugin:'idea'
    apply plugin:'war'
    apply plugin:'jetty'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'docker'
    sourceCompatibility = 1.8
    targetCompatibility = 1.8
    version '1.0'
    compileJava.options.encoding = 'UTF-8'
    springBootVersion = '1.3.0.RELEASE'
    dependencies {
        compile 'org.springframework.cloud:spring-cloud-starter-config:'
        compile 'org.springframework.cloud:spring-cloud-starter-eureka'
        compile 'org.springframework.cloud:spring-cloud-starter-eureka-server'
        compile 'org.springframework.boot:spring-boot-starter-web'
        compile 'org.springframework.boot:spring-boot-starter-actuator'
        compile group: 'org.springframework.cloud', name: 'spring-cloud-starter-feign', version: '1.2.6.RELEASE'
        testCompile ("org.springframework.boot:spring-boot-starter-test")
        testCompile ("org.assertj:assertj-core:3.5.2")
        testCompile  ("org.springframework.restdocs:spring-restdocs-mockmvc")
        testCompile  ("com.jayway.restassured:rest-assured:2.9.0")
        testCompile  ("com.jayway.restassured:spring-mock-mvc:2.9.0")
        compile libs.util
        compile libs.online
    }
    dependencyManagement {
        imports {
            mavenBom 'org.springframework.cloud:spring-cloud-dependencies:Camden.SR5'
            mavenBom 'org.springframework.cloud:spring-cloud-netflix:1.2.3.RELEASE'
            mavenBom 'org.springframework.cloud:spring-cloud-contract-dependencies:2.0.1.BUILD-SNAPSHOT'
        }
    }
    task distJar(type: Jar){
    }
    task buildDocker(type: Docker, dependsOn: distJar) {
        push = true
        applicationName = jar.baseName
        dockerfile = file('src/main/docker/Dockerfile')
        doFirst {
            copy {
                from jar
                into stageDir
            }
            copy {
                from "src/main/docker/runboot.sh"
                into stageDir
            }
        }
    }
}

buildscript {
    ext {
        springBootVersion = '1.3.0.RELEASE'
        springCloudVersion= '1.0.4.RELEASE'
    }
    repositories {
        mavenCentral()
        maven { url "http://repo.spring.io/milestone" }
        maven { url "http://repo.spring.io/snapshot" }
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath('se.transmode.gradle:gradle-docker:1.2')
        classpath "org.springframework.boot:spring-boot-gradle-plugin:1.5.4.RELEASE"
        classpath 'org.springframework:springloaded:1.2.6.RELEASE'
        classpath "org.springframework.cloud:spring-cloud-contract-gradle-plugin:2.0.1.BUILD-SNAPSHOT"

    }
}
contracts {
    baseClassForTests = 'com.example.MvcTest'
    // fully qualified name to a class that will be the base class for your generated test classes
}
idea {
    module {
        inheritOutputDirs = false
        outputDir = file("$buildDir/classes/main/")
    }
}
task wrapper(type: Wrapper) {
    gradleVersion = '2.12'
}

dependencies {
    compile('org.springframework.boot:spring-boot-starter-web')
}
