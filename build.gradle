apply from: "dependencies.gradle"
allprojects {
    apply plugin:'java'
    apply plugin:'idea'
    apply plugin:'war'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'spring-cloud-contract'
    apply plugin: "io.spring.dependency-management"
    repositories {
        mavenCentral()
        jcenter()
        maven { url "http://repo.spring.io/milestone" }
        maven { url "http://repo.spring.io/snapshot" }
        maven { url "https://plugins.gradle.org/m2/" }
    }

}
subprojects {
    apply plugin:'java'
    apply plugin:'idea'
    apply plugin:'war'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'docker'
    sourceCompatibility = 1.8
    targetCompatibility = 1.8
    version '1.0'
    compileJava.options.encoding = 'UTF-8'
//    springBootVersion = '1.3.0.RELEASE'
    dependencies {
        compile 'org.springframework.boot:spring-boot-starter-actuator'
//        compile 'org.springframework.cloud:spring-cloud-starter-feign:1.2.6.RELEASE'
        compile libs.common
        testCompile libs.test

    }
    dependencyManagement {
        imports {
            mavenBom 'org.springframework.cloud:spring-cloud-dependencies:Greenwich.SR3'
//            mavenBom 'org.springframework.cloud:spring-cloud-netflix:1.2.3.RELEASE'
//            mavenBom 'org.springframework.cloud:spring-cloud-contract-dependencies:2.0.1.BUILD-SNAPSHOT'
        }
    }
    task distJar(type: Jar){
    }
    task buildDocker(type: Docker, dependsOn: distJar) {
        push = true
        applicationName = jar.baseName
        dockerfile = file('src/main/docker/Dockerfile')
        doFirst {
            copy {
                from jar
                into stageDir
            }
            copy {
                from "src/main/docker/runboot.sh"
                into stageDir
            }
        }
    }
}

buildscript {
    repositories {
        mavenCentral()
        maven { url "http://repo.spring.io/milestone" }
        maven { url "http://repo.spring.io/snapshot" }
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
//        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath('se.transmode.gradle:gradle-docker:1.2')
        classpath "org.springframework.boot:spring-boot-gradle-plugin:2.1.11.RELEASE"
        classpath 'org.springframework:springloaded:1.2.6.RELEASE'
        classpath "org.springframework.cloud:spring-cloud-contract-gradle-plugin:2.0.1.BUILD-SNAPSHOT"
        classpath "org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:2.6.2"
//        classpath "io.spring.gradle:dependency-management-plugin:1.0.6.RELEASE"
    }
}
//sonarqube {
//    properties {
//        property "sonar.jacoco.reportPath", "build/jacoco/test.exec"
//    }
//}


contracts {
    baseClassForTests = 'com.example.MvcTest'
    // fully qualified name to a class that will be the base class for your generated test classes
}
idea {
    module {
        inheritOutputDirs = false
        outputDir = file("$buildDir/classes/main/")
    }
}
task wrapper(type: Wrapper) {
    gradleVersion = '4.4.1'
}
//
//dependencies {
//    compile('org.springframework.boot:spring-boot-starter-parent:2.2.2.RELEASE')
//}
